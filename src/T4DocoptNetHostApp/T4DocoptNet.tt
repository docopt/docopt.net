<#
/*
T4DocopNet Version 0.1.0
*/
#>
<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)DocoptNet\bin\Debug\DocoptNet.dll"  #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="DocoptNet" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>


using System.Collections;
using System.Collections.Generic;
using DocoptNet;

namespace <#= System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint") #>
{
<#
    var templateDir = Path.GetDirectoryName(Host.TemplateFile);
    var files = Directory.EnumerateFiles(templateDir).Where(f => f.EndsWith(".usage.txt"));
    foreach (var file in files)
    {
        var entry = new UsageFileEntry(file);
#>
    // Generated class for <#= Path.GetFileName(entry.FileName) #>
	public class <#= entry.Name #>Args
	{
		public const string USAGE = @"<#= entry.Usage #>";
	    private readonly IDictionary<string, ValueObject> _args;
		public <#= entry.Name #>Args(ICollection<string> argv, bool help = true,
                                                      object version = null, bool optionsFirst = false, bool exit = false)
		{
			_args = new Docopt().Apply(USAGE, argv, help, version, optionsFirst, exit);
		}

        public IDictionary<string, ValueObject> Args
        {
            get { return _args; }
        }

<#
        var s = new Docopt().GenerateCode(entry.Usage);
		PushIndent("		");
		Write(s);
		ClearIndent();
#>	
	}

<#
    }

#>	
}


<#+
class UsageFileEntry
{
    public string FileName;
	public string Name;
    public string Usage;
	public UsageFileEntry(string fileName)
	{
	    FileName = fileName;
	    Name = ExtractName(fileName);
	    Usage = File.ReadAllText(fileName).Replace("\"", "\"\"");
	}

    private static string ExtractName(string fileName)
    {
	    
        var s = Path.GetFileName(fileName).Replace(".usage.txt", "");
        var res = "";
        var first = true;
        foreach (char c in s)
        {
            if (char.IsLetterOrDigit(c))
            {
                res += first ? char.ToUpperInvariant(c) : char.ToLowerInvariant(c);
                first = false;
            }
            else
            {
                res += "_";
            }
        }
        return res;
    }
}

#>

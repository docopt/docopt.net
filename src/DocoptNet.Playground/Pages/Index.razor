@page "/"
@using System.Diagnostics
@using System.Linq;
@using System.Text;
@using DocoptNet;
@using DocoptNet.Internals;
@inject IJSRuntime JSRuntime

<div id="stats">
    <span id="perf" title="Peformance">
        @if (_ms is { } ms)
        {
            <text>&#x231A; @ms.TotalSeconds.ToString("0.0000") secs</text>
        }
    </span>
    <a id="about" target="about-docoptnet"
       href="https://github.com/docopt/docopt.net">&#x270B; What is this?</a>
    <span id="optionsFirst" title="Require options to appear before commands and positional arguments?">
        <input type="checkbox" @bind=@OptionsFirst> Options first?
    </span>
</div>

<div id="argv-pane">
    <textarea id="argv"
              @bind=@_commandLine
              @bind:event="oninput"
              @onkeyup=@(_ => Docoptify())
              autofocus
              placeholder="Enter command-line"></textarea>
</div>

<div id="result-pane">

    <textarea id="doc"
              @bind=@_input
              @bind:event="oninput"
              @onkeyup=@(_ => Docoptify())
              @ref="_inputTextArea"
              wrap="off"
              placeholder="Enter docopt text"></textarea>

    <div>
        @if (_nodes is { } nodes)
        {
            <table id="args" class="table table-sm table-striped table-borderless">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Count</th>
                    <th>Value</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var node in nodes)
                {
                    <tr>
                        <td><code>@node.Name</code></td>
                        <td>@node.ValueKind</td>
                        <td>@node.Count</td>
                        <td>@(node.Value.ToString())</td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>

    @if (_output is { Length: > 0 })
    {
        <textarea id="etc" readonly
            class="@(_error ? "syntax-error" : null)"
            @bind=@_output></textarea>
    }

</div>

@functions
{
    bool _optionsFirst;
    bool _lastOptionsFirst;
    string _commandLine;
    string _lastCommandLine;
    string _input;
    string _lastInput;
    string _output;
    IDictionary<string, Value> _args;
    List<Node> _nodes;
    bool _error;
    TimeSpan? _ms;
    ElementReference _inputTextArea;

    record Node(string Name, ValueKind ValueKind, int Count, Value Value);

    bool OptionsFirst
    {
        get => _optionsFirst;
        set { _optionsFirst = value; Docoptify(); }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _output = string.Empty;
            _commandLine = "ship Guardian move 10 50 --speed=20";
            _input = @"Naval Fate.

Usage:
  naval_fate ship new <name>...
  naval_fate ship <name> move <x> <y> [--speed=<kn>]
  naval_fate ship shoot <x> <y>
  naval_fate mine (set|remove) <x> <y> [--moored|--drifting]
  naval_fate -h | --help
  naval_fate --version

Options:
  -h --help     Show this screen.
  --version     Show version.
  --speed=<kn>  Speed in knots [default: 10].
  --moored      Moored (anchored) mine.
  --drifting    Drifting mine.
 ";
            Docoptify();
            StateHasChanged();
        }
    }

    void Docoptify()
    {
        if (_lastOptionsFirst == OptionsFirst
            && _lastInput == _input
            && _lastCommandLine == _commandLine)
        {
            return;
        }

        _lastOptionsFirst = _optionsFirst;
        _lastInput = _input;
        _lastCommandLine = _commandLine;
        _output = string.Empty;
        _error = false;
        _ms = null;

        if (_input.Length == 0)
            return;

        var sw = Stopwatch.StartNew();

        static void AppendTree(StringBuilder output, Pattern pattern, int level = 0)
        {
            output.Append(' ', level * 2);
            switch (pattern)
            {
                case BranchPattern branch:
                    output.Append(branch.GetType().Name).Append(':').AppendLine();
                    foreach (var child in branch.Children)
                        AppendTree(output, child, level + 1);
                    break;
                case LeafPattern leaf:
                    output.Append(leaf).AppendLine();
                    break;
            }
        }

        try
        {
            var sb = new StringBuilder();
            var (pattern, _, _) = Docopt.Internal.ParsePattern(_input);
            AppendTree(sb, pattern);
            _output = sb.ToString();

            var docopt = new Docopt();
            var argv = _commandLine.Split((char[])null, StringSplitOptions.RemoveEmptyEntries);
            _nodes = Docopt.Internal
                           .GetNodes(_input,
                                     (name, value) => new Node(name, value.Kind, 0, Value.None),
                                     (name, value) => new Node(name, value.IsStringList ? ValueKind.StringList : ValueKind.String, 0, Value.None),
                                     (name, _, _, _, value) => new Node(name, value.Kind, 0, Value.None))
                           .GroupBy(e => e.Name, e => e, (_, g) => new Node(g.First().Name, g.First().ValueKind, g.Count(), Value.None))
                           .ToList();
            _args = Docopt.Internal.Apply(docopt, _input, argv.AsEnumerable(), help: false, version: null, optionsFirst: _optionsFirst, exit: false);
            _nodes = _nodes.Select(n => new Node(n.Name, n.ValueKind, n.Count, _args.TryGetValue(n.Name, out var v) ? v : Value.None)).ToList();
            _ms = sw.Elapsed;
        }
        catch (DocoptBaseException e)
        {
            _args = null;
            var width = _output.Split(NewLineChars, StringSplitOptions.RemoveEmptyEntries).Select(s => s.Length).DefaultIfEmpty().Max();
            var ruler = new string('=', width);
            _output = $"{e.Message.TrimEnd()}\r\n\r\n{ruler}\r\n{_output}";
            _error = true;
        }
    }

    static readonly char[] NewLineChars = { '\r', '\n' };
}

version: 1.1.{build}
image:
  - Visual Studio 2022
  - Ubuntu1604
skip_commits:
  files:
    - '*.md'
    - '*.txt'
    - '.git*'
configuration: Release
init:
- cmd: git config --global core.autocrlf true
install:
  - cmd: curl -OsSL https://dot.net/v1/dotnet-install.ps1
  - ps: if ($isWindows) { ./dotnet-install.ps1 -JsonFile global.json }
  - sh: curl -OsSL https://dot.net/v1/dotnet-install.sh
  - sh: chmod +x dotnet-install.sh
  - sh: ./dotnet-install.sh --jsonfile global.json
  - sh: export PATH="$HOME/.dotnet:$PATH"
before_build:
- dotnet --info
- dotnet tool restore
build_script:
- ps: |
    dotnet build --configuration $env:CONFIGURATION
    if ($isWindows) {
      $versionSuffix = ([datetimeoffset]$env:APPVEYOR_REPO_COMMIT_TIMESTAMP).ToUniversalTime().ToString('yyyyMMdd''t''HHmm')
      $releaseNotesFile = [System.IO.Path]::GetTempFileName()
      $tag = $env:APPVEYOR_REPO_TAG_NAME
      # if the tag starts with "v", as in "v1.0.0", assume it's a release
      if ($tag -clike 'v*') {
        $url = (git remote get-url (git remote)) -replace '\.git$', ''
        if ($LASTEXITCODE) { throw; }
        Add-Content $releaseNotesFile -Encoding UTF8 "See: ${url}/releases/tag/$tag"
        Add-Content $releaseNotesFile -Encoding UTF8 ''
        # if tag ends in "-" followed by dot-separated identifiers...
        if ($tag -match '(?<=-)[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*$') {
          $versionSuffix = $matches[0] # ...then use as suffix for pre-release
        } else {
          $versionSuffix = $null       # ... else use no suffix for a release
        }
      }
      Add-Content $releaseNotesFile -Encoding UTF8 "Commit @ $(git rev-parse HEAD)"
      $packArgs = @()
      if ($versionSuffix) {
        $packArgs += @('--version-suffix', $versionSuffix)
      }
      dotnet pack --no-build --configuration $env:CONFIGURATION @packArgs "-p:PackageReleaseNotesFile=$releaseNotesFile"
      if ($LASTEXITCODE) { throw; }
      Get-ChildItem -File -Filter docopt.net.*.nupkg dist |
        Select-Object -ExpandProperty FullName |
        % { dotnet sourcelink test $_; if ($LASTEXITCODE) { throw; } }
    }
test_script:
- ps: dotnet test --no-build
- pwsh: |
    if ($isWindows) {
      ./tests/Integration/run.ps1 -NoPack # already packed on Windows build
    } else {
      ./tests/Integration/run.ps1
    }
after_test:
  - sh: rm -rf dist/*.nupkg
artifacts:
- path: 'dist\*.nupkg'
  name: NuGet
